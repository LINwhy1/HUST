// P1324
// Created by LINwhy on 2022/11/22
// Time 14:57
// 算法标签 ： BFS + 状态压缩(注意状态表示和状态转移)
#include<iostream>
#include<cstring>
#include<queue>
using namespace std;
const int N = (1 << 14) + 100, INF = 1e10;
const int dx[] = { 1,-1,0,0 }, dy[] = { 0,0,1,-1 };
int body[10][2], pos[22][22];
struct sneak {
	int state, step, head_x, head_y;
	sneak(int state, int step, int head_x, int head_y) :state(state), step(step), head_x(head_x), head_y(head_y) {}
};
bool vis[22][22][N];
int n, m, L, K, T;
inline bool in(int x, int y) { return 1 <= x && x <= n && 1 <= y && y <= m; }
int get_first_state(int x[][2]) {
	int res = 0;
	for (int i = L - 1; i > 0; i--) {
		res <<= 2;
		int xx = x[i][0] - x[i - 1][0], yy = x[i][1] - x[i - 1][1];
		if (xx == 0 && yy == 1) res |= 0;
		else if (xx == 0 && yy == -1) res |= 1;
		else if (xx == 1 && yy == 0) res |= 2;
		else if (xx == -1 && yy == 0) res |= 3;
	}
	return res;
}
int get_next_state(int pre_state, int head_x, int head_y, int now_x, int now_y) {
	int next_state = pre_state << 2;
	int x = head_x - now_x, y = head_y - now_y;
	if (x == 0 && y == 1) next_state |= 0;
	else if (x == 0 && y == -1) next_state |= 1;
	else if (x == 1 && y == 0) next_state |= 2;
	else if (x == -1 && y == 0) next_state |= 3;
	int logic_rule = (1 << (2 * L - 1)) - 1;
	next_state &= logic_rule;
	return next_state;
}
bool check(int pre_state, int head_x, int head_y, int now_x, int now_y) {
	int pre_x = head_x, pre_y = head_y;
	for (int i = 1; i <= L - 1; i++) {
		int state = pre_state & 3;
		if (state == 0 && pre_x == now_x && pre_y + 1 == now_y) return false;
		else if (state == 1 && pre_x == now_x && pre_y - 1 == now_y) return false;
		else if (state == 2 && pre_x + 1 == now_x && pre_y == now_y) return false;
		else if (state == 3 && pre_x - 1 == now_x && pre_y == now_y)return false;
		if (state == 0) pre_y += 1;
		else if (state == 1) pre_y -= 1;
		else if (state == 2) pre_x += 1;
		else if (state == 3) pre_x -= 1;
		pre_state >>= 2;
	}
	return true;
}
int main() {
	while (scanf("%d %d %d", &n, &m, &L), n) {
		memset(pos, 0, sizeof pos);
		memset(vis, false, sizeof vis);
		for (int i = 0; i < L; i++) {
			scanf("%d %d", &body[i][0], &body[i][1]);
		}
		scanf("%d", &K);
		for (int i = 0; i < K; i++) {
			int x, y;
			cin >> x >> y;
			pos[x][y] = 1;
		}
		int first_state = get_first_state(body);
		vis[body[0][0]][body[0][1]][first_state] = true;
		sneak first_sneak(first_state, 0, body[0][0], body[0][1]);
		queue<sneak>q;
		q.push(first_sneak);
		int ans = INF;
		while (q.size()) {
			sneak top = q.front();
			q.pop();
			if (top.head_x == 1 && top.head_y == 1) {
				ans = min(ans, top.step);
				break;
			}
			for (int i = 0; i < 4; i++) {
				int x = top.head_x + dx[i], y = top.head_y + dy[i];
				if (in(x, y) && pos[x][y] == 0 && check(top.state, top.head_x, top.head_y, x, y)) {
					int next_state = get_next_state(top.state, top.head_x, top.head_y, x, y);
					if (!vis[x][y][next_state]) {
						vis[x][y][next_state] = true;
						sneak nxt_sneak(next_state, top.step + 1, x, y);
						q.push(nxt_sneak);
					}
				}
			}
		}
		if (ans == INF) ans = -1;
		T++;
		printf("Case %d: %d\n", T, ans);
	}
	return 0;
}
// 本题特别恶心，卡map，查询时必须O(1)查询
// 交了27遍啊

